// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  username         String?         @unique
  userId           String
  password         String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  sessions         Session[]
  role             String? // Role of the user (admin, user, etc.)
  fullName         String? // Full name of the user
  magicLink        MagicLink[]
  numberOfSessions Int             @default(1)
  topics           Topic[]
  articleSeries    ArticleSeries[]
  articles         Article[]
  comment          Comment[]
  readLater        ReadLater[]
  likedArticles    Like[]
  followers        Follow[]        @relation(name: "UserFollowings")
  followings       Follow[]        @relation(name: "UserFollowers")
  articleReads     ArticleRead[]
  articleStories   ArticleStoryDistribution[]
  articleActivities UserActivity[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique @db.VarChar(700)
  expiresAt DateTime
  createdAt DateTime @default(now())
  ipAddress String // Store the IP address
  location  String? // Store the location (e.g., city or country)
  userAgent String // Store the user agent (web browser info)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "idx_user_id")
}

model MagicLink {
  id        Int      @id @default(autoincrement())
  linkToken String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Topic {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  description String    @default("")
  logo        String    @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  articles    Article[]
}

model ArticleSeries {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  logo        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  articles    Article[]
}

model Article {
  id              Int            @id @default(autoincrement())
  title           String
  subtitle        String
  htmlContent     String         @db.LongText
  markdownContent String         @db.LongText
  coverImage      String?
  readTimeMinutes Decimal
  canPublishStory Boolean        @default(true)
  isPublished     Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  articleSeries   ArticleSeries? @relation(fields: [articleSeriesId], references: [id], onDelete: SetNull)
  articleSeriesId Int?
  topics          Topic[]
  comment         Comment[]
  readLater       ReadLater[]
  likes           Like[]
  reader          ArticleRead[]
  story           ArticleStory?
  userActivities  UserActivity[]
}

model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        Int
  article         Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId       Int
  parentComment   Comment?  @relation("RepliesTo", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId Int?
  replies         Comment[] @relation("RepliesTo")
}

// This collection is used to store read later articles, user can add articles to read later
model ReadLater {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

// This collection will be used to hold the likes of the article
model Like {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    LikeStatus
  article   Article    @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

// ENUM of like
enum LikeStatus {
  liked
  disliked
}

model Follow {
  id              Int      @id @default(autoincrement())
  follower        User     @relation(name: "UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId      Int
  followed        User     @relation(name: "UserFollowings", fields: [followedId], references: [id], onDelete: Cascade)
  followedId      Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isSuggested     Boolean  @default(false)
  suggestionCount Int      @default(0)
}

// Read percentage
model ArticleRead {
  id                Int      @id @default(autoincrement())
  article           Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId         Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  readTimeInMinutes Decimal @default(0)
  readPercentage    Decimal @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  readCount         Int @default(1) // Number of times the article has been read
}

// Article stories 
model ArticleStory {
  id        Int      @id @default(autoincrement())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  story     String @db.LongText // AI generated summary
  storyFor ArticleStoryDistribution[]
}

// Article story distribution
model ArticleStoryDistribution {
  id        Int      @id @default(autoincrement())
  isSeen    Boolean
  story     ArticleStory @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

// User activity
model UserActivity {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  action    UserActivityAction
}

enum UserActivityAction {
  like
  comment
  dislike
  save
  create
}
